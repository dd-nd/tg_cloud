from telebot.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from werkzeug.utils import secure_filename
from dotenv import load_dotenv
import sqlite3 as sq
import telebot
import os

load_dotenv()
token = os.getenv("TOKEN")
bot = telebot.TeleBot(token)

files_to_update = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ–∞–π–ª–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif', 'doc', 'docx'}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message: Message):
    bot.send_message( message.chat.id, '–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª ü§ó')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–µ–º–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(content_types=['document'])
def upload_file(message: Message):
    user_id = message.from_user.id
    user_nickname = message.from_user.username
    try:
        if allowed_file(message.document.file_name):
            file_name = secure_filename(message.document.file_name).split('.')[0]
            file_type = secure_filename(message.document.file_name).split('.')[1]
            downloaded_file = bot.download_file(bot.get_file(message.document.file_id).file_path)

            with sq.connect('db/database.db') as con: 
                cur = con.cursor()
                cur.execute(f'INSERT INTO files (name, format, data, user_id, user_name) VALUES (?, ?, ?, ?, ?)', (file_name, file_type, downloaded_file, 
                                                                                                                   user_id, user_nickname))
                bot.send_message( message.chat.id, '–ù—è–º ü§ó')
    except sq.IntegrityError:
        bot.send_message( message.chat.id, '–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ ü•±')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
@bot.message_handler(commands=['all'])
def get_file_name(message: Message):
    try:
        with sq.connect('db/database.db') as con: 
            cur = con.cursor()
            cur.execute(f'SELECT name FROM files WHERE user_id = "{message.from_user.id}"')
            results = [res[0] for res in cur.fetchall()]
        markup = InlineKeyboardMarkup()
        for i in results:
            btn = InlineKeyboardButton(i, callback_data=i)
            markup.add(btn)
        bot.send_message( message.chat.id, '–í—ã–±–µ—Ä–∏ —Ñ–∞–π–ª –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π ü§ó', reply_markup=markup)
    except Exception as e:
        bot.send_message( message.chat.id, f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ü§ó\n{str(e)}')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
@bot.callback_query_handler(func=lambda call: True)
def edit_file_name(call: Message):
    bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ ü§ó')
    files_to_update[call.data] = call.from_user.id
    old_file_name = call.data

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    @bot.message_handler(func=lambda message: True)
    def handle_file_name(message: Message):
        new_file_name = message.text
        if call.from_user.id == files_to_update.get(call.data):
            try:
                with sq.connect('db/database.db') as con:
                    cur = con.cursor()
                    cur.execute(f'UPDATE files SET name = "{new_file_name}" WHERE user_id = "{call.from_user.id}" AND name = "{old_file_name}"')
                    con.commit()
                    bot.send_message(message.chat.id, '–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! ‚ú®')
    
                    # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                    del files_to_update[old_file_name]
            except Exception as e:
                bot.send_message(message.chat.id, f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ü§ó\n{str(e)}')
        else:
            bot.send_message(call.message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞! ‚ùå')
    bot.register_next_step_handler(call.message, handle_file_name)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
# @bot.message_handler(content_types=['text'])
# def update_file_name(message):
#     if not message.text:
#         bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ç–µ–∫—Å—Ç–æ–º.')
#         return
#     user_id = message.from_user.id

#     if user_id == files_to_update['change']:
#         new_name = message.text

#         try:
#             with sq.connect('db/database.db') as con:
#                 cur = con.cursor()
#                 cur.execute(f'UPDATE files SET name = "{new_name}" WHERE user_id = "{user_id}" AND name = "{files_to_update[user_id]}"')
#                 con.commit()
#                 bot.send_message(message.chat.id, '–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!üéâ')
#         except Exception as e:
#             bot.send_message(message.chat.id, f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ü§ó\n{str(e)}')

#         # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
#         del files_to_update[user_id]


if __name__ == '__main__':
    bot.infinity_polling()